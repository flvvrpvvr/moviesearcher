{"version":3,"sources":["assets/spinner.svg","components/Header.js","components/MovieCard.js","components/MoviesList.js","components/Favorites.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","search","query","fetch","apiKey","then","res","json","data","sendData","results","filter","movie","poster_path","handleChange","e","preventDefault","input","value","state","showSearch","setTimeout","setState","Box","className","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","Heading","onClick","this","goHome","color","level","margin","toggleFavorites","role","aria-label","fontSize","flex","alignItems","Collapsible","open","Form","onChange","ref","focus","type","Button","icon","Search","React","Component","MovieCard","close","alt","src","title","justifyContent","display","paddingRight","release_date","split","vote_average","id","genres","map","genre","key","name","htmlFor","overview","MoviesList","store","favorites","JSON","parse","localStorage","getItem","length","console","log","movies","push","setItem","stringify","some","item","movieIndex","undefined","showMovieCard","loading","spinner","i","Favorites","removeFromStorage","defaultChecked","theme","global","colors","brand","font","family","size","height","App","getGenres","forEach","genre_ids","getQuery","val","favoritesIsOpen","getMovies","Grommet","full","fill","overflow","horizontal","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b2139da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.b134487f.svg\";","import React from 'react';\r\nimport './Header.css'\r\nimport { Search } from 'grommet-icons';\r\nimport { Box,\r\n         Heading,\r\n         Collapsible,\r\n         Button,\r\n         Form, } from 'grommet';\r\n\r\nclass Header extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showSearch: false\r\n    }\r\n  }\r\n\r\n\r\n  search = (query) => {\r\n      fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.props.apiKey}&language=en-US&query=${query}&page=1&include_adult=false`)\r\n      .then(res => res.json())\r\n      .then(data => this.props.sendData(data.results.filter(movie => movie.poster_path !== null)))\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    e.preventDefault();\r\n    const query = this.input.value;\r\n    query && this.search(query);\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(\r\n      () => this.setState({\r\n       showSearch: !this.state.showSearch\r\n     }), 1000)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Box className='header' tag='header' direction='row' align='center' justify='between' background='brand' pad={{ left: 'medium', right: 'small', vertical: 'small' }} elevation='medium' style={{ zIndex: '3' }}>\r\n        <Heading onClick={this.props.goHome} color='brand' level='3' margin='none'>Movie Searcher</Heading>\r\n\r\n        <span onClick={this.props.toggleFavorites} role=\"img\" aria-label='favorite' className='favorite' style={{fontSize: '2rem'}}>❤️</span>\r\n\r\n        <Box flex direction='row' style={{ flex: 'none', alignItems: 'center' }}>\r\n          <Collapsible direction=\"horizontal\" open={this.state.showSearch}>\r\n              <Form onChange={this.handleChange}>\r\n                <input ref={input => {\r\n                  this.input = input;\r\n                  return input && input.focus()\r\n                }} type='text' />\r\n              </Form>\r\n          </Collapsible>\r\n          <Button\r\n            icon={<Search color='brand' />}\r\n            onClick={() =>\r\n              this.setState({\r\n               showSearch: !this.state.showSearch\r\n               })\r\n             }\r\n          />\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './MovieCard.css'\r\n\r\n\r\nconst MovieCard = ({ movie, close }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"overlay\" onClick={close} />\r\n          <div className=\"card\">\r\n            <img alt='' src={'https://image.tmdb.org/t/p/w500/' + movie.poster_path} />\r\n          <div className=\"card_right\">\r\n            <h2>{movie.title}</h2>\r\n            <div className=\"card_right__details\">\r\n              <div style={{justifyContent: 'space-between', display: 'flex', paddingRight: '4em'}}>\r\n                <ul>\r\n                  <li>{movie.release_date.split('-')[0]}</li>\r\n                  <li>{movie.vote_average}</li>\r\n                </ul>\r\n                <ul id='genres'>\r\n                  {movie.genres.map(genre => <li key={genre}>{genre}</li>)}\r\n                </ul>\r\n              </div>\r\n              <div className=\"card_right__rating\">\r\n                    <input id=\"star5\" name=\"rating\" type=\"radio\" value=\"5\" />\r\n                    <label className=\"full\" htmlFor=\"star5\"></label>\r\n                    <input id=\"star4\" name=\"rating\" type=\"radio\" value=\"4\" />\r\n                    <label className=\"full\" htmlFor=\"star4\"></label>\r\n                    <input id=\"star3\" name=\"rating\" type=\"radio\" value=\"3\" />\r\n                    <label className=\"full\" htmlFor=\"star3\"></label>\r\n                    <input id=\"star2\" name=\"rating\" type=\"radio\" value=\"2\" />\r\n                    <label className=\"full\" htmlFor=\"star2\"></label>\r\n                    <input id=\"star1\" name=\"rating\" type=\"radio\" value=\"1\" />\r\n                    <label className=\"full\" htmlFor=\"star1\"></label>\r\n              </div>\r\n              <div className=\"card_right__review\">\r\n                <p>{movie.overview}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MovieCard;\r\n","import React from 'react';\r\nimport './MoviesList.css'\r\nimport { Box } from 'grommet';\r\nimport MovieCard from './MovieCard';\r\nimport spinner from '../assets/spinner.svg';\r\n\r\n\r\nclass MoviesList extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movieIndex: undefined,\r\n      showMovieCard: false,\r\n    }\r\n  }\r\n\r\n  store = (movie) => {\r\n      let favorites = JSON.parse(localStorage.getItem('favorites'))\r\n\r\n      if (favorites == null || favorites.length === 0) {\r\n        console.log('1.favorites is empty - add movie');\r\n        let movies = [];\r\n        movies.push(movie)\r\n        localStorage.setItem(\r\n          'favorites',\r\n            JSON.stringify(\r\n              movies\r\n            )\r\n        )\r\n      } else {\r\n        if (favorites.some(item => item.id === movie.id)) {\r\n        console.log('already exists - deleted');\r\n        localStorage.setItem(\r\n          'favorites',\r\n            JSON.stringify(\r\n              favorites.filter(item => item.id !== movie.id)\r\n            )\r\n        )\r\n      } else {\r\n          favorites.push(movie)\r\n          localStorage.setItem(\r\n            'favorites',\r\n              JSON.stringify(\r\n                favorites\r\n              )\r\n          )\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <Box className=\"movies-wrapper\">\r\n          {\r\n            this.props.movies.length === 0 || this.props.loading ?\r\n            <div className=\"wrapper\">\r\n              <img src={spinner} alt=\"\" />\r\n            </div>\r\n             :\r\n            this.props.movies.map((movie, i) => {\r\n              return (\r\n                 <div key={movie.id} className=\"textWithBlurredBg\">\r\n                  <span className='heart'>\r\n                    <input onChange={() => this.store(movie)} id=\"fav\" type=\"checkbox\" />\r\n                    <label htmlFor=\"fav\"></label>\r\n                  </span>\r\n                  <img onClick={() =>\r\n                    this.setState({\r\n                     movieIndex: i,\r\n                     showMovieCard: !this.state.showMovieCard\r\n                     })\r\n                  } alt='' src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} />\r\n                  <h2>{movie.title} ({movie.release_date.split('-')[0]})</h2>\r\n                  {/* <p>{movie.overview}</p> */}\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n        {\r\n          this.state.showMovieCard &&\r\n          <MovieCard  movie={this.props.movies[this.state.movieIndex]}  close={() => this.setState({\r\n           showMovieCard: !this.state.showMovieCard\r\n          })} />\r\n        }\r\n        </Box>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default MoviesList;\r\n","import React from 'react';\r\nimport './MoviesList.css'\r\nimport { Box } from 'grommet';\r\nimport MovieCard from './MovieCard';\r\n\r\nclass Favorites extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movies: JSON.parse(localStorage.getItem('favorites')),\r\n      showMovieCard: false,\r\n    }\r\n  }\r\n\r\n  removeFromStorage = (movie) => {\r\n    this.setState({\r\n     movies: this.state.movies.filter(item => movie !== item)\r\n   }, () => {\r\n     localStorage.setItem(\r\n       'favorites',\r\n         JSON.stringify(\r\n           JSON.parse(localStorage.getItem('favorites')).filter(item => item.id !== movie.id)\r\n         )\r\n     )\r\n   })\r\n  }\r\n\r\n  render() {\r\n    return this.state.movies.length !== 0\r\n     ?\r\n      (\r\n        <Box className=\"movies-wrapper\">\r\n\r\n          {\r\n            this.state.movies.map((movie, i) => {\r\n              return (\r\n                 <div key={movie.id} className=\"textWithBlurredBg\">\r\n                  <span onClick={() => this.removeFromStorage(movie)}\r\n                className='heart'>\r\n                    <input id=\"fav\" type=\"checkbox\" defaultChecked />\r\n                    <label htmlFor=\"fav\"></label>\r\n                  </span>\r\n                  <img onClick={() =>\r\n                    this.setState({\r\n                     movieIndex: i,\r\n                     showMovieCard: !this.state.showMovieCard\r\n                     })\r\n                  } alt='' src={'https://image.tmdb.org/t/p/w500/' + movie.poster_path} />\r\n                  <h2>{movie.title} ({movie.release_date.split('-')[0]})</h2>\r\n                  {/* <p>{movie.overview}</p> */}\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n\r\n          {this.state.showMovieCard &&\r\n            <MovieCard movie={this.state.movies[this.state.movieIndex]} close={() => this.setState({showMovieCard: !this.state.showMovieCard})}\r\n           />}\r\n        </Box>\r\n    )\r\n       : (<Box className=\"nothing\">\r\n         <h2>Nothing here yet...</h2>\r\n       </Box>)\r\n  }\r\n}\r\n\r\n\r\nexport default Favorites;\r\n","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport Header from './components/Header';\r\nimport MoviesList from './components/MoviesList';\r\nimport Favorites from './components/Favorites';\r\nimport {\r\n  Grommet,\r\n  Box,\r\n} from 'grommet';\r\n\r\n\r\nconst theme = {\r\n  global: {\r\n    colors: {\r\n      brand: '#fff',\r\n    },\r\n    font: {\r\n      family: 'Roboto',\r\n      size: '14px',\r\n      height: '20px',\r\n    },\r\n  },\r\n};\r\n\r\nlet genres = [];\r\nconst apiKey = '3bfc2790af0abb18fd91abed5ebdd0d2';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      favoritesIsOpen: false,\r\n      movies: [],\r\n    }\r\n  }\r\n\r\n  getGenres = (movies) => {\r\n    movies.forEach(movie => movie.genres = movie.genre_ids.map(id => genres.filter(genre => genre.id === id)[0].name))\r\n  }\r\n\r\n  getQuery = (val) => {\r\n    this.setState({loading: true})\r\n    this.getGenres(val)\r\n    setTimeout(() => {\r\n      this.setState({\r\n        movies: val,\r\n        favoritesIsOpen: false,\r\n        loading: false,\r\n      })\r\n    }, 500\r\n    )\r\n  }\r\n\r\n  getMovies = () => {\r\n    fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${apiKey}&language=en-US`)\r\n    .then(res => res.json())\r\n    .then(data => genres = data.genres)\r\n    .then(() => fetch(`https://api.themoviedb.org/3/movie/top_rated?api_key=${apiKey}&language=en-US&page=1`))\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      this.getGenres(data.results)\r\n      this.setState({\r\n        movies: data.results,\r\n        })\r\n      }\r\n    )\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMovies()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grommet theme={theme} full>\r\n            <Box fill>\r\n                <Header\r\n                  toggleFavorites={() => this.setState({\r\n                    favoritesIsOpen: !this.state.favoritesIsOpen\r\n                  })\r\n                  }\r\n                  apiKey={apiKey}\r\n                  goHome={() => {\r\n                    this.setState({\r\n                      favoritesIsOpen: false,\r\n                      showMovieCard: false\r\n                    })\r\n                    this.getMovies();\r\n                  }}\r\n                  sendData={this.getQuery} />\r\n              <Box direction='row' flex overflow={{ horizontal: 'hidden' }}>\r\n                {\r\n                  this.state.favoritesIsOpen ?\r\n                  (<Favorites />)\r\n                  :\r\n                  (<MoviesList loading={this.state.loading} movies={this.state.movies} />)\r\n                }\r\n              </Box>\r\n            </Box>\r\n      </Grommet>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}